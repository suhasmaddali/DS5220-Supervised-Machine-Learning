{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dbae21ad",
   "metadata": {},
   "source": [
    "# Problem 2 \n",
    "### c) Verifying the calculations in (a-i) and (b-i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 406,
   "id": "c98be7fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy.linalg import svd\n",
    "from numpy.linalg import eig\n",
    "from numpy import matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 407,
   "id": "86c5a0f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "A = matrix([[2, 2], [-1, 1]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 408,
   "id": "4ca4a90d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[ 2, -1],\n",
       "        [ 2,  1]])"
      ]
     },
     "execution_count": 408,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 409,
   "id": "f35f3406",
   "metadata": {},
   "outputs": [],
   "source": [
    "A = matrix([[1, 1], \n",
    "     [1, 1], \n",
    "     [1, -1]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 410,
   "id": "b5e6adb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1  1]\n",
      " [ 1  1]\n",
      " [ 1 -1]]\n"
     ]
    }
   ],
   "source": [
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 411,
   "id": "0f84f371",
   "metadata": {},
   "outputs": [],
   "source": [
    "U, sigma, Vt = svd(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 412,
   "id": "63c73e2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-7.07106781e-01 -2.22044605e-16 -7.07106781e-01]\n",
      " [-7.07106781e-01 -1.11022302e-16  7.07106781e-01]\n",
      " [-5.55111512e-17  1.00000000e+00 -2.25745422e-16]]\n"
     ]
    }
   ],
   "source": [
    "print(U)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 413,
   "id": "df773115",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.         1.41421356]\n"
     ]
    }
   ],
   "source": [
    "print(sigma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 414,
   "id": "78a155be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-0.70710678 -0.70710678]\n",
      " [ 0.70710678 -0.70710678]]\n"
     ]
    }
   ],
   "source": [
    "print(Vt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 415,
   "id": "b495b84c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([4.0000000e+00, 4.4408921e-16, 2.0000000e+00]),\n",
       " matrix([[ 0.70710678, -0.70710678,  0.        ],\n",
       "         [ 0.70710678,  0.70710678,  0.        ],\n",
       "         [ 0.        ,  0.        ,  1.        ]]))"
      ]
     },
     "execution_count": 415,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eig(A @ A.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 416,
   "id": "91fb3f6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[ 1,  1,  1],\n",
       "        [ 1,  1, -1]])"
      ]
     },
     "execution_count": 416,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "id": "cfc10924",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([4., 2.]),\n",
       " matrix([[ 0.70710678, -0.70710678],\n",
       "         [ 0.70710678,  0.70710678]]))"
      ]
     },
     "execution_count": 417,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eig(A.T @ A)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45db29bd",
   "metadata": {},
   "source": [
    "# Problem 4\n",
    "### Libraries for all the problems"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 418,
   "id": "5d0d2163",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import math\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.metrics import r2_score\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import LeaveOneOut\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 419,
   "id": "5076938a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>...</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7129300520</td>\n",
       "      <td>20141013T000000</td>\n",
       "      <td>221900.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1180</td>\n",
       "      <td>5650</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1180</td>\n",
       "      <td>0</td>\n",
       "      <td>1955</td>\n",
       "      <td>0</td>\n",
       "      <td>98178</td>\n",
       "      <td>47.5112</td>\n",
       "      <td>-122.257</td>\n",
       "      <td>1340</td>\n",
       "      <td>5650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6414100192</td>\n",
       "      <td>20141209T000000</td>\n",
       "      <td>538000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.25</td>\n",
       "      <td>2570</td>\n",
       "      <td>7242</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>2170</td>\n",
       "      <td>400</td>\n",
       "      <td>1951</td>\n",
       "      <td>1991</td>\n",
       "      <td>98125</td>\n",
       "      <td>47.7210</td>\n",
       "      <td>-122.319</td>\n",
       "      <td>1690</td>\n",
       "      <td>7639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5631500400</td>\n",
       "      <td>20150225T000000</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.00</td>\n",
       "      <td>770</td>\n",
       "      <td>10000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>770</td>\n",
       "      <td>0</td>\n",
       "      <td>1933</td>\n",
       "      <td>0</td>\n",
       "      <td>98028</td>\n",
       "      <td>47.7379</td>\n",
       "      <td>-122.233</td>\n",
       "      <td>2720</td>\n",
       "      <td>8062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2487200875</td>\n",
       "      <td>20141209T000000</td>\n",
       "      <td>604000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>3.00</td>\n",
       "      <td>1960</td>\n",
       "      <td>5000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1050</td>\n",
       "      <td>910</td>\n",
       "      <td>1965</td>\n",
       "      <td>0</td>\n",
       "      <td>98136</td>\n",
       "      <td>47.5208</td>\n",
       "      <td>-122.393</td>\n",
       "      <td>1360</td>\n",
       "      <td>5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1954400510</td>\n",
       "      <td>20150218T000000</td>\n",
       "      <td>510000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1680</td>\n",
       "      <td>8080</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>1680</td>\n",
       "      <td>0</td>\n",
       "      <td>1987</td>\n",
       "      <td>0</td>\n",
       "      <td>98074</td>\n",
       "      <td>47.6168</td>\n",
       "      <td>-122.045</td>\n",
       "      <td>1800</td>\n",
       "      <td>7503</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           id             date     price  bedrooms  bathrooms  sqft_living  \\\n",
       "0  7129300520  20141013T000000  221900.0         3       1.00         1180   \n",
       "1  6414100192  20141209T000000  538000.0         3       2.25         2570   \n",
       "2  5631500400  20150225T000000  180000.0         2       1.00          770   \n",
       "3  2487200875  20141209T000000  604000.0         4       3.00         1960   \n",
       "4  1954400510  20150218T000000  510000.0         3       2.00         1680   \n",
       "\n",
       "   sqft_lot  floors  waterfront  view  ...  grade  sqft_above  sqft_basement  \\\n",
       "0      5650     1.0           0     0  ...      7        1180              0   \n",
       "1      7242     2.0           0     0  ...      7        2170            400   \n",
       "2     10000     1.0           0     0  ...      6         770              0   \n",
       "3      5000     1.0           0     0  ...      7        1050            910   \n",
       "4      8080     1.0           0     0  ...      8        1680              0   \n",
       "\n",
       "   yr_built  yr_renovated  zipcode      lat     long  sqft_living15  \\\n",
       "0      1955             0    98178  47.5112 -122.257           1340   \n",
       "1      1951          1991    98125  47.7210 -122.319           1690   \n",
       "2      1933             0    98028  47.7379 -122.233           2720   \n",
       "3      1965             0    98136  47.5208 -122.393           1360   \n",
       "4      1987             0    98074  47.6168 -122.045           1800   \n",
       "\n",
       "   sqft_lot15  \n",
       "0        5650  \n",
       "1        7639  \n",
       "2        8062  \n",
       "3        5000  \n",
       "4        7503  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 419,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('kc_house_data.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 420,
   "id": "7de873f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(['id', 'date', 'zipcode'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 421,
   "id": "ee23a6aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>condition</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>221900.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1180</td>\n",
       "      <td>5650</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1180</td>\n",
       "      <td>0</td>\n",
       "      <td>1955</td>\n",
       "      <td>0</td>\n",
       "      <td>47.5112</td>\n",
       "      <td>-122.257</td>\n",
       "      <td>1340</td>\n",
       "      <td>5650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>538000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.25</td>\n",
       "      <td>2570</td>\n",
       "      <td>7242</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>2170</td>\n",
       "      <td>400</td>\n",
       "      <td>1951</td>\n",
       "      <td>1991</td>\n",
       "      <td>47.7210</td>\n",
       "      <td>-122.319</td>\n",
       "      <td>1690</td>\n",
       "      <td>7639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>180000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.00</td>\n",
       "      <td>770</td>\n",
       "      <td>10000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>770</td>\n",
       "      <td>0</td>\n",
       "      <td>1933</td>\n",
       "      <td>0</td>\n",
       "      <td>47.7379</td>\n",
       "      <td>-122.233</td>\n",
       "      <td>2720</td>\n",
       "      <td>8062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>604000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>3.00</td>\n",
       "      <td>1960</td>\n",
       "      <td>5000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>1050</td>\n",
       "      <td>910</td>\n",
       "      <td>1965</td>\n",
       "      <td>0</td>\n",
       "      <td>47.5208</td>\n",
       "      <td>-122.393</td>\n",
       "      <td>1360</td>\n",
       "      <td>5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>510000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1680</td>\n",
       "      <td>8080</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>1680</td>\n",
       "      <td>0</td>\n",
       "      <td>1987</td>\n",
       "      <td>0</td>\n",
       "      <td>47.6168</td>\n",
       "      <td>-122.045</td>\n",
       "      <td>1800</td>\n",
       "      <td>7503</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      price  bedrooms  bathrooms  sqft_living  sqft_lot  floors  waterfront  \\\n",
       "0  221900.0         3       1.00         1180      5650     1.0           0   \n",
       "1  538000.0         3       2.25         2570      7242     2.0           0   \n",
       "2  180000.0         2       1.00          770     10000     1.0           0   \n",
       "3  604000.0         4       3.00         1960      5000     1.0           0   \n",
       "4  510000.0         3       2.00         1680      8080     1.0           0   \n",
       "\n",
       "   view  condition  grade  sqft_above  sqft_basement  yr_built  yr_renovated  \\\n",
       "0     0          3      7        1180              0      1955             0   \n",
       "1     0          3      7        2170            400      1951          1991   \n",
       "2     0          3      6         770              0      1933             0   \n",
       "3     0          5      7        1050            910      1965             0   \n",
       "4     0          3      8        1680              0      1987             0   \n",
       "\n",
       "       lat     long  sqft_living15  sqft_lot15  \n",
       "0  47.5112 -122.257           1340        5650  \n",
       "1  47.7210 -122.319           1690        7639  \n",
       "2  47.7379 -122.233           2720        8062  \n",
       "3  47.5208 -122.393           1360        5000  \n",
       "4  47.6168 -122.045           1800        7503  "
      ]
     },
     "execution_count": 421,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "id": "531afcea",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop(['price'], axis = 1)\n",
    "y = df['price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 423,
   "id": "fe924a9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-3.41516691e+04,  4.21617075e+04,  1.08722972e+02,  1.27416302e-01,\n",
       "        7.60688060e+02,  5.87847215e+05,  4.94292277e+04,  3.10318017e+04,\n",
       "        9.72193692e+04,  7.07908517e+01,  3.79321197e+01, -2.45627635e+03,\n",
       "        2.15324371e+01,  5.61060482e+05, -1.17020859e+05,  2.74311971e+01,\n",
       "       -3.93287863e-01])"
      ]
     },
     "execution_count": 423,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LinearRegression()\n",
    "model.fit(X, y)\n",
    "model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "id": "16fc6c33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors',\n",
       "       'waterfront', 'view', 'condition', 'grade', 'sqft_above',\n",
       "       'sqft_basement', 'yr_built', 'yr_renovated', 'lat', 'long',\n",
       "       'sqft_living15', 'sqft_lot15'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 424,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 425,
   "id": "84ca519b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>Coefficients</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>bedrooms</td>\n",
       "      <td>-34151.669114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>bathrooms</td>\n",
       "      <td>42161.707505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>sqft_living</td>\n",
       "      <td>108.722972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>sqft_lot</td>\n",
       "      <td>0.127416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>floors</td>\n",
       "      <td>760.688060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>waterfront</td>\n",
       "      <td>587847.215242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>view</td>\n",
       "      <td>49429.227698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>condition</td>\n",
       "      <td>31031.801737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>grade</td>\n",
       "      <td>97219.369206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>sqft_above</td>\n",
       "      <td>70.790852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>sqft_basement</td>\n",
       "      <td>37.932120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>yr_built</td>\n",
       "      <td>-2456.276350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>yr_renovated</td>\n",
       "      <td>21.532437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>lat</td>\n",
       "      <td>561060.482290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>long</td>\n",
       "      <td>-117020.858685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>sqft_living15</td>\n",
       "      <td>27.431197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>sqft_lot15</td>\n",
       "      <td>-0.393288</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Features   Coefficients\n",
       "0        bedrooms  -34151.669114\n",
       "1       bathrooms   42161.707505\n",
       "2     sqft_living     108.722972\n",
       "3        sqft_lot       0.127416\n",
       "4          floors     760.688060\n",
       "5      waterfront  587847.215242\n",
       "6            view   49429.227698\n",
       "7       condition   31031.801737\n",
       "8           grade   97219.369206\n",
       "9      sqft_above      70.790852\n",
       "10  sqft_basement      37.932120\n",
       "11       yr_built   -2456.276350\n",
       "12   yr_renovated      21.532437\n",
       "13            lat  561060.482290\n",
       "14           long -117020.858685\n",
       "15  sqft_living15      27.431197\n",
       "16     sqft_lot15      -0.393288"
      ]
     },
     "execution_count": 425,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(list(zip(X.columns, model.coef_)), columns = ['Features', 'Coefficients'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "id": "43205778",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Problem 4 \n",
    "## a) The table that explains the relationship between Features and the Coefficients according to the Linear Regression Model\n",
    "##    is present above. The features that have a positive correlation with the price are bathrooms, sqft_living, sqft_lot, floors,\n",
    "##    waterfront, view, condition, grade, sqft_above, sqft_basement, yr_renovated, lat, long, sqft_living15. \n",
    "##    The feature that has a very strong positive correlation with price is waterfront. It makes an intuitive sense as houses \n",
    "##    with waterfronts tend to be costlier than the other houses respectively. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 427,
   "id": "48a45de6",
   "metadata": {},
   "outputs": [],
   "source": [
    "## b) Yes, we were able to find the features that have inverse relationship with the prices according to our linear regression model are bedrooms\n",
    "##    yr_built and sqft_lot15 respectively. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 428,
   "id": "f114ab67",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_train = pd.read_csv('train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 429,
   "id": "bcd77afc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>condition</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>221900.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1180</td>\n",
       "      <td>5650</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1180</td>\n",
       "      <td>0</td>\n",
       "      <td>1955</td>\n",
       "      <td>0</td>\n",
       "      <td>98178</td>\n",
       "      <td>47.5112</td>\n",
       "      <td>-122.257</td>\n",
       "      <td>1340</td>\n",
       "      <td>5650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>538000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.25</td>\n",
       "      <td>2570</td>\n",
       "      <td>7242</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>2170</td>\n",
       "      <td>400</td>\n",
       "      <td>1951</td>\n",
       "      <td>1991</td>\n",
       "      <td>98125</td>\n",
       "      <td>47.7210</td>\n",
       "      <td>-122.319</td>\n",
       "      <td>1690</td>\n",
       "      <td>7639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.00</td>\n",
       "      <td>770</td>\n",
       "      <td>10000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>770</td>\n",
       "      <td>0</td>\n",
       "      <td>1933</td>\n",
       "      <td>0</td>\n",
       "      <td>98028</td>\n",
       "      <td>47.7379</td>\n",
       "      <td>-122.233</td>\n",
       "      <td>2720</td>\n",
       "      <td>8062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>604000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>3.00</td>\n",
       "      <td>1960</td>\n",
       "      <td>5000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>1050</td>\n",
       "      <td>910</td>\n",
       "      <td>1965</td>\n",
       "      <td>0</td>\n",
       "      <td>98136</td>\n",
       "      <td>47.5208</td>\n",
       "      <td>-122.393</td>\n",
       "      <td>1360</td>\n",
       "      <td>5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>510000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1680</td>\n",
       "      <td>8080</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>1680</td>\n",
       "      <td>0</td>\n",
       "      <td>1987</td>\n",
       "      <td>0</td>\n",
       "      <td>98074</td>\n",
       "      <td>47.6168</td>\n",
       "      <td>-122.045</td>\n",
       "      <td>1800</td>\n",
       "      <td>7503</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0     price  bedrooms  bathrooms  sqft_living  sqft_lot  floors  \\\n",
       "0           1  221900.0         3       1.00         1180      5650     1.0   \n",
       "1           2  538000.0         3       2.25         2570      7242     2.0   \n",
       "2           3  180000.0         2       1.00          770     10000     1.0   \n",
       "3           4  604000.0         4       3.00         1960      5000     1.0   \n",
       "4           5  510000.0         3       2.00         1680      8080     1.0   \n",
       "\n",
       "   waterfront  view  condition  grade  sqft_above  sqft_basement  yr_built  \\\n",
       "0           0     0          3      7        1180              0      1955   \n",
       "1           0     0          3      7        2170            400      1951   \n",
       "2           0     0          3      6         770              0      1933   \n",
       "3           0     0          5      7        1050            910      1965   \n",
       "4           0     0          3      8        1680              0      1987   \n",
       "\n",
       "   yr_renovated  zipcode      lat     long  sqft_living15  sqft_lot15  \n",
       "0             0    98178  47.5112 -122.257           1340        5650  \n",
       "1          1991    98125  47.7210 -122.319           1690        7639  \n",
       "2             0    98028  47.7379 -122.233           2720        8062  \n",
       "3             0    98136  47.5208 -122.393           1360        5000  \n",
       "4             0    98074  47.6168 -122.045           1800        7503  "
      ]
     },
     "execution_count": 429,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 430,
   "id": "47e962b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_train = df_train.drop(['Unnamed: 0', 'zipcode'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 431,
   "id": "5fbbf663",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000, 18)"
      ]
     },
     "execution_count": 431,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 432,
   "id": "81ff66eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 433,
   "id": "46bc8aff",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df_train.drop(['price'], axis = 1)\n",
    "y_actual = df_train['price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 434,
   "id": "d22f42b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000, 17)"
      ]
     },
     "execution_count": 434,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 435,
   "id": "80879a21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000,)"
      ]
     },
     "execution_count": 435,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_actual.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "id": "950d6a64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 436,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X, y_actual)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "id": "e046e820",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predict = model.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "id": "2e553e8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.47042805e+04,  2.56877840e+04,  8.30842102e+01,  3.75929764e-01,\n",
       "        1.55555810e+04,  7.15535170e+05,  6.30278980e+04,  1.88164028e+04,\n",
       "        7.95346027e+04,  4.20104951e+01,  4.10737151e+01, -2.40066933e+03,\n",
       "        4.36829418e+01,  5.53505032e+05, -7.42402712e+03,  6.80157923e+01,\n",
       "       -5.15527568e-01])"
      ]
     },
     "execution_count": 438,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "id": "1ce677c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "MSE = mean_squared_error(y_actual, y_predict)\n",
    "RMSE = math.sqrt(MSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "id": "645a736c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The root mean squared error in our dataset for training data is: 177443.42133704163\n"
     ]
    }
   ],
   "source": [
    "print(\"The root mean squared error in our dataset for training data is: {}\".format(RMSE))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 441,
   "id": "39eeb43e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R square value in our dataset for training data is 0.6236008473480462\n"
     ]
    }
   ],
   "source": [
    "print(\"The R square value in our dataset for training data is {}\".format(r2_score(y_predict, y_actual)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "id": "a370751e",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Problem 4\n",
    "## c) The coefficients of linear regression for training data are\n",
    "##    [-1.47042805e+04,  2.56877840e+04,  8.30842102e+01,  3.75929764e-01,\n",
    "##     1.55555810e+04,  7.15535170e+05,  6.30278980e+04,  1.88164028e+04,\n",
    "##     7.95346027e+04,  4.20104951e+01,  4.10737151e+01, -2.40066933e+03,\n",
    "##     4.36829418e+01,  5.53505032e+05, -7.42402712e+03,  6.80157923e+01,\n",
    "##     -5.15527568e-01]\n",
    "##     The root mean squared error (RMSE) in our dataset for training data is 17444 approximately. \n",
    "##     The R squared value in our dataset for training data is 0.623 approximately. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "id": "a119f7de",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_test = pd.read_csv('test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "id": "60eed7ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>...</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1001</td>\n",
       "      <td>3131200640</td>\n",
       "      <td>20150427T000000</td>\n",
       "      <td>700000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1830</td>\n",
       "      <td>4590</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>1830</td>\n",
       "      <td>0</td>\n",
       "      <td>1908</td>\n",
       "      <td>0</td>\n",
       "      <td>98105</td>\n",
       "      <td>47.6593</td>\n",
       "      <td>-122.327</td>\n",
       "      <td>1650</td>\n",
       "      <td>4590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1002</td>\n",
       "      <td>984000710</td>\n",
       "      <td>20141022T000000</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1560</td>\n",
       "      <td>8853</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1560</td>\n",
       "      <td>0</td>\n",
       "      <td>1967</td>\n",
       "      <td>0</td>\n",
       "      <td>98058</td>\n",
       "      <td>47.4312</td>\n",
       "      <td>-122.171</td>\n",
       "      <td>1610</td>\n",
       "      <td>8750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1003</td>\n",
       "      <td>4167300350</td>\n",
       "      <td>20140508T000000</td>\n",
       "      <td>258000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1730</td>\n",
       "      <td>8320</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1230</td>\n",
       "      <td>500</td>\n",
       "      <td>1977</td>\n",
       "      <td>0</td>\n",
       "      <td>98023</td>\n",
       "      <td>47.3270</td>\n",
       "      <td>-122.361</td>\n",
       "      <td>1840</td>\n",
       "      <td>9800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1004</td>\n",
       "      <td>2826049282</td>\n",
       "      <td>20140614T000000</td>\n",
       "      <td>530000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.50</td>\n",
       "      <td>1930</td>\n",
       "      <td>7214</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>1930</td>\n",
       "      <td>0</td>\n",
       "      <td>2005</td>\n",
       "      <td>0</td>\n",
       "      <td>98125</td>\n",
       "      <td>47.7191</td>\n",
       "      <td>-122.309</td>\n",
       "      <td>1930</td>\n",
       "      <td>7266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1005</td>\n",
       "      <td>8946750030</td>\n",
       "      <td>20141218T000000</td>\n",
       "      <td>245000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.25</td>\n",
       "      <td>1422</td>\n",
       "      <td>3677</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1422</td>\n",
       "      <td>0</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "      <td>98092</td>\n",
       "      <td>47.3204</td>\n",
       "      <td>-122.178</td>\n",
       "      <td>1677</td>\n",
       "      <td>3677</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0          id             date     price  bedrooms  bathrooms  \\\n",
       "0        1001  3131200640  20150427T000000  700000.0         4       2.00   \n",
       "1        1002   984000710  20141022T000000  270000.0         3       2.00   \n",
       "2        1003  4167300350  20140508T000000  258000.0         4       1.75   \n",
       "3        1004  2826049282  20140614T000000  530000.0         3       2.50   \n",
       "4        1005  8946750030  20141218T000000  245000.0         3       2.25   \n",
       "\n",
       "   sqft_living  sqft_lot  floors  waterfront  ...  grade  sqft_above  \\\n",
       "0         1830      4590     2.0           0  ...      8        1830   \n",
       "1         1560      8853     1.0           0  ...      7        1560   \n",
       "2         1730      8320     1.0           0  ...      7        1230   \n",
       "3         1930      7214     2.0           0  ...      8        1930   \n",
       "4         1422      3677     2.0           0  ...      7        1422   \n",
       "\n",
       "   sqft_basement  yr_built  yr_renovated  zipcode      lat     long  \\\n",
       "0              0      1908             0    98105  47.6593 -122.327   \n",
       "1              0      1967             0    98058  47.4312 -122.171   \n",
       "2            500      1977             0    98023  47.3270 -122.361   \n",
       "3              0      2005             0    98125  47.7191 -122.309   \n",
       "4              0      2012             0    98092  47.3204 -122.178   \n",
       "\n",
       "   sqft_living15  sqft_lot15  \n",
       "0           1650        4590  \n",
       "1           1610        8750  \n",
       "2           1840        9800  \n",
       "3           1930        7266  \n",
       "4           1677        3677  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 444,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "id": "99034978",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_test.drop(['date', 'Unnamed: 0', 'id', 'zipcode'], axis = 1, inplace = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "id": "53336448",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test = df_test.drop(['price'], axis = 1)\n",
    "y_actual_test = df_test['price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "id": "85c7963d",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predict_test = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "id": "8a10b5b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "MSE = mean_squared_error(y_actual_test, y_predict_test)\n",
    "RMSE = math.sqrt(MSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "id": "9135fbe9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The root mean squared error in our dataset for testing data is: 240058.6484708906\n"
     ]
    }
   ],
   "source": [
    "print(\"The root mean squared error in our dataset for testing data is: {}\".format(RMSE))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 450,
   "id": "95aa4974",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R square value in our dataset for training data is 0.6543560876120941\n"
     ]
    }
   ],
   "source": [
    "print(\"The R square value in our dataset for training data is {}\".format(r2_score(y_actual_test, y_predict_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 451,
   "id": "e26c035e",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Problem 4\n",
    "## d) The root mean squared error in our dataset for testing data is 240058.64 approximately.\n",
    "##    The R squared error in our dataset for testing data is 0.6543 approximately. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "id": "b0b1ce59",
   "metadata": {},
   "outputs": [],
   "source": [
    "## e) We could see that root mean square error for the training data is about 177443 \n",
    "##    and the root mean square error for the testing data is about 240058 respectively.\n",
    "##    We could see that the model is overfitting on the training data as there is a lot of difference\n",
    "##    between the training data and the test data respectively. \n",
    "##    The features in our linear regression model that have positive relationship with the price are bathrooms, waterfront\n",
    "##    and view respectively. \n",
    "##    The model error could be calculated by taking the difference root mean squared error on the training data\n",
    "##    and the root mean squared error on the testing data which is 240058.64 - 177443 = 62615.64 respectively."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "732d9802",
   "metadata": {},
   "source": [
    "## Problem 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 523,
   "id": "d6dbbff8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('Carseats.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 524,
   "id": "bb3ab74a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Sales</th>\n",
       "      <th>CompPrice</th>\n",
       "      <th>Income</th>\n",
       "      <th>Advertising</th>\n",
       "      <th>Population</th>\n",
       "      <th>Price</th>\n",
       "      <th>ShelveLoc</th>\n",
       "      <th>Age</th>\n",
       "      <th>Education</th>\n",
       "      <th>Urban</th>\n",
       "      <th>US</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>9.50</td>\n",
       "      <td>138</td>\n",
       "      <td>73</td>\n",
       "      <td>11</td>\n",
       "      <td>276</td>\n",
       "      <td>120</td>\n",
       "      <td>Bad</td>\n",
       "      <td>42</td>\n",
       "      <td>17</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>11.22</td>\n",
       "      <td>111</td>\n",
       "      <td>48</td>\n",
       "      <td>16</td>\n",
       "      <td>260</td>\n",
       "      <td>83</td>\n",
       "      <td>Good</td>\n",
       "      <td>65</td>\n",
       "      <td>10</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>10.06</td>\n",
       "      <td>113</td>\n",
       "      <td>35</td>\n",
       "      <td>10</td>\n",
       "      <td>269</td>\n",
       "      <td>80</td>\n",
       "      <td>Medium</td>\n",
       "      <td>59</td>\n",
       "      <td>12</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>7.40</td>\n",
       "      <td>117</td>\n",
       "      <td>100</td>\n",
       "      <td>4</td>\n",
       "      <td>466</td>\n",
       "      <td>97</td>\n",
       "      <td>Medium</td>\n",
       "      <td>55</td>\n",
       "      <td>14</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>4.15</td>\n",
       "      <td>141</td>\n",
       "      <td>64</td>\n",
       "      <td>3</td>\n",
       "      <td>340</td>\n",
       "      <td>128</td>\n",
       "      <td>Bad</td>\n",
       "      <td>38</td>\n",
       "      <td>13</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Sales  CompPrice  Income  Advertising  Population  Price  \\\n",
       "0           1   9.50        138      73           11         276    120   \n",
       "1           2  11.22        111      48           16         260     83   \n",
       "2           3  10.06        113      35           10         269     80   \n",
       "3           4   7.40        117     100            4         466     97   \n",
       "4           5   4.15        141      64            3         340    128   \n",
       "\n",
       "  ShelveLoc  Age  Education Urban   US  \n",
       "0       Bad   42         17   Yes  Yes  \n",
       "1      Good   65         10   Yes  Yes  \n",
       "2    Medium   59         12   Yes  Yes  \n",
       "3    Medium   55         14   Yes  Yes  \n",
       "4       Bad   38         13   Yes   No  "
      ]
     },
     "execution_count": 524,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 525,
   "id": "a5679dee",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.get_dummies(df, columns = ['Urban', 'US'], drop_first = True)\n",
    "df.rename(columns = {'Urban_Yes': 'Urban', 'US_Yes': 'US'}, inplace = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 526,
   "id": "4c77204e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df[['Price', 'Advertising', 'Urban', 'US']]\n",
    "y = df['Sales']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 527,
   "id": "7d296f01",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 528,
   "id": "b14ee84c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 528,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LinearRegression(fit_intercept = True)\n",
    "model.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 529,
   "id": "d3a37b74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.05461169,  0.12033344, -0.03878985,  0.05851378])"
      ]
     },
     "execution_count": 529,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 530,
   "id": "fb53beae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13.011278201140055"
      ]
     },
     "execution_count": 530,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.intercept_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cadf4ff",
   "metadata": {},
   "source": [
    "## Calculating the Standard Error for Price and Advertising as they are quantitative features. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 531,
   "id": "323281ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "from statistics import variance, mean\n",
    "import math"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc6037ff",
   "metadata": {},
   "source": [
    "## t-value for Price Predictor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 532,
   "id": "37219a1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Sales</th>\n",
       "      <th>CompPrice</th>\n",
       "      <th>Income</th>\n",
       "      <th>Advertising</th>\n",
       "      <th>Population</th>\n",
       "      <th>Price</th>\n",
       "      <th>ShelveLoc</th>\n",
       "      <th>Age</th>\n",
       "      <th>Education</th>\n",
       "      <th>Urban</th>\n",
       "      <th>US</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>9.50</td>\n",
       "      <td>138</td>\n",
       "      <td>73</td>\n",
       "      <td>11</td>\n",
       "      <td>276</td>\n",
       "      <td>120</td>\n",
       "      <td>Bad</td>\n",
       "      <td>42</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>11.22</td>\n",
       "      <td>111</td>\n",
       "      <td>48</td>\n",
       "      <td>16</td>\n",
       "      <td>260</td>\n",
       "      <td>83</td>\n",
       "      <td>Good</td>\n",
       "      <td>65</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>10.06</td>\n",
       "      <td>113</td>\n",
       "      <td>35</td>\n",
       "      <td>10</td>\n",
       "      <td>269</td>\n",
       "      <td>80</td>\n",
       "      <td>Medium</td>\n",
       "      <td>59</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>7.40</td>\n",
       "      <td>117</td>\n",
       "      <td>100</td>\n",
       "      <td>4</td>\n",
       "      <td>466</td>\n",
       "      <td>97</td>\n",
       "      <td>Medium</td>\n",
       "      <td>55</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>4.15</td>\n",
       "      <td>141</td>\n",
       "      <td>64</td>\n",
       "      <td>3</td>\n",
       "      <td>340</td>\n",
       "      <td>128</td>\n",
       "      <td>Bad</td>\n",
       "      <td>38</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Sales  CompPrice  Income  Advertising  Population  Price  \\\n",
       "0           1   9.50        138      73           11         276    120   \n",
       "1           2  11.22        111      48           16         260     83   \n",
       "2           3  10.06        113      35           10         269     80   \n",
       "3           4   7.40        117     100            4         466     97   \n",
       "4           5   4.15        141      64            3         340    128   \n",
       "\n",
       "  ShelveLoc  Age  Education  Urban  US  \n",
       "0       Bad   42         17      1   1  \n",
       "1      Good   65         10      1   1  \n",
       "2    Medium   59         12      1   1  \n",
       "3    Medium   55         14      1   1  \n",
       "4       Bad   38         13      1   0  "
      ]
     },
     "execution_count": 532,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 533,
   "id": "4e7676a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df[['Price']]\n",
    "y = df['Sales']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 534,
   "id": "25b235b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 534,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LinearRegression()\n",
    "model.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 535,
   "id": "bfd4d6e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  Sales   R-squared:                       0.198\n",
      "Model:                            OLS   Adj. R-squared:                  0.196\n",
      "Method:                 Least Squares   F-statistic:                     98.25\n",
      "Date:                Wed, 06 Oct 2021   Prob (F-statistic):           7.62e-21\n",
      "Time:                        21:47:25   Log-Likelihood:                -938.23\n",
      "No. Observations:                 400   AIC:                             1880.\n",
      "Df Residuals:                     398   BIC:                             1888.\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         13.6419      0.633     21.558      0.000      12.398      14.886\n",
      "Price         -0.0531      0.005     -9.912      0.000      -0.064      -0.043\n",
      "==============================================================================\n",
      "Omnibus:                        2.537   Durbin-Watson:                   1.892\n",
      "Prob(Omnibus):                  0.281   Jarque-Bera (JB):                2.611\n",
      "Skew:                           0.175   Prob(JB):                        0.271\n",
      "Kurtosis:                       2.816   Cond. No.                         591.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "new_variable = sm.add_constant(X)\n",
    "estimate = sm.OLS(y, new_variable)\n",
    "new_variable_2 = estimate.fit()\n",
    "print(new_variable_2.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 536,
   "id": "c1e0fa6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predictions = model.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 537,
   "id": "57dbc409",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(400, 1)"
      ]
     },
     "execution_count": 537,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 538,
   "id": "8cba8eb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "Residual_sum_of_squares = sum((y_predictions - y) ** 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 539,
   "id": "aad020a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "Price_coefficient = model.coef_[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 540,
   "id": "73a9ff52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "115.795"
      ]
     },
     "execution_count": 540,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Price_mean = mean(X['Price'])\n",
    "Price_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 541,
   "id": "a4f3d7e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "number_of_features = X.shape[0]\n",
    "Residual_standard_error = math.sqrt(Residual_sum_of_squares / (number_of_features - 2))\n",
    "Price_standard_error =  np.sqrt((Residual_standard_error ** 2/ sum((X['Price'] - Price_mean) ** 2)))\n",
    "Price_t_value = Price_coefficient / Price_standard_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 542,
   "id": "a63e2b0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The t-value for Price predictor: -9.911997178907441\n"
     ]
    }
   ],
   "source": [
    "print(\"The t-value for Price predictor: {}\".format(Price_t_value))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "979ac4f9",
   "metadata": {},
   "source": [
    "## t-Value for Advertising Predictor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 543,
   "id": "02fd2fca",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df[['Advertising']]\n",
    "y = df['Sales']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 544,
   "id": "ca1ae9ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 544,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LinearRegression()\n",
    "model.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 545,
   "id": "5d40b3fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  Sales   R-squared:                       0.073\n",
      "Model:                            OLS   Adj. R-squared:                  0.070\n",
      "Method:                 Least Squares   F-statistic:                     31.17\n",
      "Date:                Wed, 06 Oct 2021   Prob (F-statistic):           4.38e-08\n",
      "Time:                        21:47:30   Log-Likelihood:                -967.27\n",
      "No. Observations:                 400   AIC:                             1939.\n",
      "Df Residuals:                     398   BIC:                             1947.\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===============================================================================\n",
      "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------\n",
      "const           6.7370      0.192     35.007      0.000       6.359       7.115\n",
      "Advertising     0.1144      0.020      5.583      0.000       0.074       0.155\n",
      "==============================================================================\n",
      "Omnibus:                        3.396   Durbin-Watson:                   1.951\n",
      "Prob(Omnibus):                  0.183   Jarque-Bera (JB):                3.137\n",
      "Skew:                           0.200   Prob(JB):                        0.208\n",
      "Kurtosis:                       3.167   Cond. No.                         13.3\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "new_variable = sm.add_constant(X)\n",
    "estimate = sm.OLS(y, new_variable)\n",
    "new_variable_2 = estimate.fit()\n",
    "print(new_variable_2.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 546,
   "id": "8ebb14a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predictions = model.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 547,
   "id": "8568a6f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.635"
      ]
     },
     "execution_count": 547,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Advertising_mean = mean(X['Advertising'])\n",
    "Advertising_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 548,
   "id": "6d93d159",
   "metadata": {},
   "outputs": [],
   "source": [
    "Advertising_coefficient = model.coef_[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 549,
   "id": "7dacc05e",
   "metadata": {},
   "outputs": [],
   "source": [
    "Residual_sum_of_squares = sum((y_predictions - y) ** 2)\n",
    "Residual_standard_error = math.sqrt(Residual_sum_of_squares / (number_of_features - 2))\n",
    "Advertising_standard_error = math.sqrt(Residual_standard_error ** 2/ sum((X['Advertising'] - Advertising_mean) ** 2))\n",
    "Advertising_t_value = Advertising_coefficient / Advertising_standard_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 550,
   "id": "45041f70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.583231385142151"
      ]
     },
     "execution_count": 550,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Advertising_t_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 551,
   "id": "0692dbe3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The t-value for Advertising predictor: 5.583231385142151\n"
     ]
    }
   ],
   "source": [
    "print(\"The t-value for Advertising predictor: {}\".format(Advertising_t_value))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0af14e3d",
   "metadata": {},
   "source": [
    "## t-value for Urban Predictor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 552,
   "id": "5423528a",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df[['Urban']]\n",
    "y = df['Sales']\n",
    "model = LinearRegression()\n",
    "model.fit(X, y)\n",
    "y_predictions = model.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 553,
   "id": "0a1aeacc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  Sales   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                 -0.002\n",
      "Method:                 Least Squares   F-statistic:                   0.09465\n",
      "Date:                Wed, 06 Oct 2021   Prob (F-statistic):              0.759\n",
      "Time:                        21:47:36   Log-Likelihood:                -982.31\n",
      "No. Observations:                 400   AIC:                             1969.\n",
      "Df Residuals:                     398   BIC:                             1977.\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          7.5636      0.260     29.060      0.000       7.052       8.075\n",
      "Urban         -0.0954      0.310     -0.308      0.759      -0.705       0.514\n",
      "==============================================================================\n",
      "Omnibus:                        2.379   Durbin-Watson:                   1.897\n",
      "Prob(Omnibus):                  0.304   Jarque-Bera (JB):                2.418\n",
      "Skew:                           0.185   Prob(JB):                        0.299\n",
      "Kurtosis:                       2.914   Cond. No.                         3.45\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "new_variable = sm.add_constant(X)\n",
    "estimate = sm.OLS(y, new_variable)\n",
    "new_variable_2 = estimate.fit()\n",
    "print(new_variable_2.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 554,
   "id": "2fa646cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "Urban_coefficient = model.coef_[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 555,
   "id": "bca3a930",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.705"
      ]
     },
     "execution_count": 555,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Urban_mean = mean(X['Urban'])\n",
    "Urban_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 556,
   "id": "c8c65b9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "Residual_sum_of_squares = sum((y_predictions - y) ** 2)\n",
    "Residual_standard_error = math.sqrt(Residual_sum_of_squares / (number_of_features - 2))\n",
    "Urban_standard_error = math.sqrt(Residual_standard_error ** 2/ sum((X['Urban'] - Urban_mean) ** 2))\n",
    "Urban_t_value = Urban_coefficient / Urban_standard_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 557,
   "id": "bc7af257",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The t-value for Urban predictor: -0.30765346670661187\n"
     ]
    }
   ],
   "source": [
    "print(\"The t-value for Urban predictor: {}\".format(Urban_t_value))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ceeba57",
   "metadata": {},
   "source": [
    "## t-value for US Predictor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 488,
   "id": "678fee89",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df[['US']]\n",
    "y = df['Sales']\n",
    "model = LinearRegression()\n",
    "model.fit(X, y)\n",
    "y_predictions = model.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 489,
   "id": "0ff28ed0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  Sales   R-squared:                       0.031\n",
      "Model:                            OLS   Adj. R-squared:                  0.029\n",
      "Method:                 Least Squares   F-statistic:                     12.89\n",
      "Date:                Wed, 06 Oct 2021   Prob (F-statistic):           0.000372\n",
      "Time:                        21:23:44   Log-Likelihood:                -975.98\n",
      "No. Observations:                 400   AIC:                             1956.\n",
      "Df Residuals:                     398   BIC:                             1964.\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          6.8230      0.234     29.215      0.000       6.364       7.282\n",
      "US             1.0439      0.291      3.590      0.000       0.472       1.616\n",
      "==============================================================================\n",
      "Omnibus:                        1.471   Durbin-Watson:                   1.902\n",
      "Prob(Omnibus):                  0.479   Jarque-Bera (JB):                1.443\n",
      "Skew:                           0.146   Prob(JB):                        0.486\n",
      "Kurtosis:                       2.973   Cond. No.                         3.12\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "new_variable = sm.add_constant(X)\n",
    "estimate = sm.OLS(y, new_variable)\n",
    "new_variable_2 = estimate.fit()\n",
    "print(new_variable_2.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 490,
   "id": "5d6faab4",
   "metadata": {},
   "outputs": [],
   "source": [
    "US_coefficient = model.coef_[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 491,
   "id": "9b1aae70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.645"
      ]
     },
     "execution_count": 491,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "US_mean = mean(X['US'])\n",
    "US_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 492,
   "id": "ce8ad2b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "Residual_sum_of_squares = sum((y_predictions - y) ** 2)\n",
    "Residual_standard_error = math.sqrt(Residual_sum_of_squares / (number_of_features - 2))\n",
    "US_standard_error = math.sqrt(Residual_standard_error ** 2/ sum((X['US'] - US_mean) ** 2))\n",
    "US_t_value = US_coefficient / US_standard_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 493,
   "id": "5404129f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The t-value for US predictor: 3.589738747802489\n"
     ]
    }
   ],
   "source": [
    "print(\"The t-value for US predictor: {}\".format(US_t_value))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 582,
   "id": "d5183830",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 582,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = df[['Advertising', 'Price']]\n",
    "y = df['Sales']\n",
    "model = LinearRegression()\n",
    "model.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 583,
   "id": "8680fb48",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predictions = model.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 584,
   "id": "56f383c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Root Mean Squared Error for the model is: 2.3902576967831513\n"
     ]
    }
   ],
   "source": [
    "MSE = mean_squared_error(y, y_predictions)\n",
    "RMSE = math.sqrt(MSE)\n",
    "print(\"The Root Mean Squared Error for the model is: {}\".format(RMSE))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54452838",
   "metadata": {},
   "source": [
    "## Confidence intervals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 585,
   "id": "f0af733f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Based on the results above, we have to reject the null hypothesis for predictors Advertising, US, and Price\n",
    "## We have to accept the null hypothesis for the predictor Advertising i.e. there is no relationship between advertising\n",
    "## and sales. \n",
    "\n",
    "Price_confidence_range = [Price_coefficient - 2 * Price_standard_error, Price_coefficient + 2 * Price_standard_error]\n",
    "Advertising_confidence_range = [Advertising_coefficient - 2 * Advertising_standard_error, Advertising_coefficient + 2 * Advertising_standard_error]\n",
    "US_confidence_range = [US_coefficient - 2 * US_standard_error, US_coefficient + 2 * US_standard_error]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 587,
   "id": "f6b4c03a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The confidence interval for Price predictor is: [-0.06378186304870437, -0.04236417394392761]\n",
      "The confidence interval for Advertising predictor is: [0.0734506904739179, 0.15544449168751612]\n"
     ]
    }
   ],
   "source": [
    "print(\"The confidence interval for Price predictor is: {}\".format(Price_confidence_range))\n",
    "print(\"The confidence interval for Advertising predictor is: {}\".format(Advertising_confidence_range))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ade74f8",
   "metadata": {},
   "source": [
    "## Predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 499,
   "id": "7541710b",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predictions = model.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 500,
   "id": "f83f3d98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Root Mean Squared Error for the model is: 2.3901741554417986\n"
     ]
    }
   ],
   "source": [
    "MSE = mean_squared_error(y, y_predictions)\n",
    "RMSE = math.sqrt(MSE)\n",
    "print(\"The Root Mean Squared Error for the model is: {}\".format(RMSE))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 501,
   "id": "0da3c3a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Considering only the features based on our t-test\n",
    "X_important_features = df[['Price', 'Urban', 'US']]\n",
    "y = df['Sales']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 502,
   "id": "26f1aca9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 502,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LinearRegression(fit_intercept = True)\n",
    "model.fit(X_important_features, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 503,
   "id": "c2f31e20",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predictions = model.predict(X_important_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 504,
   "id": "bacabd31",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Root Mean Squared Error for the model is: 2.4600989164099034\n"
     ]
    }
   ],
   "source": [
    "MSE = mean_squared_error(y, y_predictions)\n",
    "RMSE = math.sqrt(MSE)\n",
    "print(\"The Root Mean Squared Error for the model is: {}\".format(RMSE))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 505,
   "id": "ab5a2fc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "##Problem 5\n",
    "\n",
    "## a. Fit a multiple regression model to predict Sales using Price, Advertising, Urban, and US.\n",
    "\n",
    "## Ans. Answer in the above cells. \n",
    "\n",
    "## b. Provide an interpretation of each coefficient in the model. Be careful - some of the variables in the model are qualitative!\n",
    "\n",
    "## Ans. Based on the outcomes from the coefficients, we see that Advertising and Sales have positive outcomes.\n",
    "## That is, with the increase in the advertisements, there would be an increase in sales\n",
    "## according to our linear regression model. We can also see from the above that with the increase in the prices of cars,\n",
    "## there is a lower possibility of sales of the cars respectively. Some of the variables are qualitative such as Urban\n",
    "## and US. \n",
    "\n",
    "## c. Write out the modle in equation form, being careful to handle the qualitative variables properly. \n",
    "\n",
    "## Ans. The equation that could be written is as follows. \n",
    "## Y = 13.0112 - 0.0546 * X1 + 0.1203 * X2 - 0.0387 * X3 + 0.058 * X4 which is based on the above coefficients. \n",
    "\n",
    "## d. For which of the predictions can you reject the null hypothesis? \n",
    "\n",
    "## Ans. We chose the significance level to be 0.01 which is mostly used. Based on the results above, we see that if \n",
    "## the t-value <= 2.364, we accept the NULL hypothesis and if t-value > 2.364, we reject the null hypothesis. From the \n",
    "## results above, we can conclude that we should be taking only the features Price, Urban and US. The feature that do\n",
    "## not have any relationship between sales, according to our test, is Advertising respectively. \n",
    "\n",
    "## e. On the basis of your response to the previous question, fit a smaller model \n",
    "## that only uses the predictors for which there is evidence of association with the outcome.\n",
    "\n",
    "## Ans. Answer in the notebook. \n",
    "\n",
    "## f. How well do the model in (a) and (e) fit the data?\n",
    "\n",
    "## Ans. The first model with 4 features was able to fit the data well as compared to the second model that contained only \n",
    "## 3 features. However, the difference was not that significant as there seeems to be a small change in error when we are trying\n",
    "## to fit fewer features to our linear regression model. We performed the t-tests and found the ones that have relationship\n",
    "## with the output and rejected others that don't have a really strong relationship. This resulted in (e) model performing\n",
    "## almost identical to the (a) model respectively. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "704ff8c4-bca2-4b15-bb50-803cbb2b9f4f",
   "metadata": {},
   "source": [
    "# Question 6\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 506,
   "id": "2f1c1523-aeaf-4cba-95f2-ea0582d13353",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.random.normal(0, 1, (200))\n",
    "y = x + 2 * x**2 - 2 * x**3 + np.random.normal(0, 1, (200))\n",
    "\n",
    "## Problem 6 \n",
    "## a) In the problem, the value of n = 200 and the value of p = 1\n",
    "##    The model that was used is multiple linear regression model. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "151d4492-eaf9-4487-baeb-c0ed84bad803",
   "metadata": {},
   "source": [
    "a) The model that was used in the process of prediction of the y variable is multiple linear regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 507,
   "id": "e07a98e5-68e3-44f9-a1b1-348304c27a99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYcAAAEYCAYAAAC3LjroAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8rg+JYAAAACXBIWXMAAAsTAAALEwEAmpwYAAAhFUlEQVR4nO3de5hcdZ3n8fcnnY50QOlkCQxpwOCIURBIhiwDy6wj1zCAEm4GF13GGzuKK8zyRJPRkYsyZIwKM97ZGZRHGElQaKJxDMhFRwfQYAIhQgRFIJ0sBKFBkgY6yXf/qFOhuk5VdVV3VZ2q7s/reerpOqdO1fme7uR863dXRGBmZlZoQtYBmJlZ63FyMDOzFCcHMzNLcXIwM7MUJwczM0txcjAzsxQnB2tpku6QdL+kiUX7z5AUko5vYiyzJW2T9KESr/03STskvafBMcxIrvuURp7HzMnBWt1HgLcAH8vvkLQbcBWwLCJua1YgEbEa+DKwWNIeBfF0AF8F7oqI65oVj1kjOTlYS4uIh4EvAJdK6kl2XwrsDvxtBiH9PfASsLhg30fJJbAPZxCPWUM4OVg7+AzwB+BKSYeQK0VcHBEby71B0vskvSypu2j/QUm1zLHJ9l9I+g9JLySPNZLOKve5EfFHcknp/ZKOlPQnwGXA5yJifZlYdpW0RdJHSry2StK3k+d7S7pG0u8kDUj6jaTPSppU6ZeTXM9Hi/ZdIumZon37SbpB0rOStkpaKWlm0TGLJD0q6SVJT0n6UXKNNs44OVjLi4itwAXAWcAtwK+BLw3ztpuSn6cV7Z8PPA3cJel1wA+A3wFnAGcC3wa6h4lnGXAr8DXgSmAzcHmF47ck55lfuF/SG4DDgKXJrj2AZ4H/A5wILAHex/DXOixJU4GfATOBvwHeBewK/FhSV3LM/wT+DvgiMJdcSejR5DgbbyLCDz/a4gGsAgI4usrjbwF+VLRvPfDl5Pmc5PNeO4JY/hQYSN4/t4rjTwO2A9ML9i0ilwwmlXnPROB/kKvGmpTsm5Gc85SC4wL4aNF7LwGeKdjOl76mFuybAjwPnJ9sfxn4XtZ/Zz9a4+GSg7UFSXOA2eRuhG+v8m1LgWPzjceSZgFv4tVv6r8FXgT+TdKpxVVQlUTEb4GbgbURsbKKt/x7cq7CKqv5wM0R8UoSnyRdKOnXkgaAQeB64DXAftXGVsZxwG3AC5ImJr2//gjcRy5JAqwBTpJ0qaTDk4Z2G6ecHKzlSZpArgrnbnKN0R9PqmSGs5zcDfb0ZHs+0EeueoWIeA44AegElgGbJa2o8rMBXkkew4qIl8iVZOYn1zQTOBS4oeCwC8k1vt8MnAocDpyfvLZLlTGVs0dy7sGix9HAvskx15CrVnoXcC/wlKTPOEmMTxOHP8Qsc39DrtTwZ+Sqhd4L/DNQsa9/RLwoaQW5m+LV5G56yyIiCo65GzgxqXc/jlx9+78BRzTgOpYC35e0XxLTZuCOgtfPAm6MiE/md0g6sIrPfRkobrSeWrT9LLlk+ZkS7/8jQETsINeGcqWkfYFzyLWl9AFfryIOG0OcHKylSdqT3A3qSxHxQLLvY8AKSadGxC3DfMQNwFJJ7wDewNBv6jtFxAC5G/dbybUFNMKtwHPkktR84LsRsb3g9S5yN/pC51TxuRvIdaUFdpa0jik65vbkvOuSa60oIp4kN57jfUA1CcrGGCcHa3WfJ9fwe3F+R0T8UNItwFWSbh3mZrcC2Ap8A3gsIn6Rf0HSycD7gV7gCaAH+F8M/TZfNxExKOlmcr2R9iY3wK/QbcDHJN1Lrj3kHOCNVXz0zcD5klaT63n1QeB1Rcd8EXgPcIekL5ErDewF/CXws4j4jqRvkCth3EOuofpo4ADgE7Veq7U/tzlYy5L0NnJVSBdFxAtFL18A7EmujryspK5/Obmb8dKilx8l18D9D+S+1X8O+BG5hNEoNySxbAT+o+i1y4DvAJ9Nfr5CwcjwCi4Fbkze9y1yDcvXFB4QEc+Qqyp7mFzVUf56dwceSA67G3gb8E3gh+R6WH0oInqrvjobM1RQ/WpmZga45GBmZiU4OZiZWYqTg5mZpTg5mJlZypjoyrrHHnvEjBkzsg7DzKyt3Hfffc9ExLRSr42J5DBjxgxWrVqVdRhmZm1F0uPlXnO1kpmZpTg5mJlZipODmZmlODmYmVmKk4OZmaWMid5KI9W7uo8lK9ezsX+A6d1dLJg7k3mze7IOy8wsc+M2OfSu7mPRTWsZGMxNp9/XP8Cim9YCOEGY2bg3bquVlqxcvzMx5A0MbmfJyvUZRWRm1jrGbXLY2F96fZhy+83MxpNxmxymd3fVtN/MbDwZt8lhwdyZdHV2DNnX1dnBgrkzM4rIzKx1jNsG6Xyjs3srmZmljdvkALkE4WRgZpY2bquVzMysPCcHMzNLcXIwM7MUJwczM0txcjAzsxQnBzMzS3FyMDOzFCcHMzNLcXIwM7MUJwczM0txcjAzs5TMk4OkDkmrJf0g2Z4q6TZJjyQ/p2Qdo5nZeJN5cgAuAB4q2F4I3B4RBwC3J9tmZtZEmSYHSfsAJwP/UrD7VODa5Pm1wLwmh2VmNu5lXXK4Cvg4sKNg314RsQkg+blnqTdKOk/SKkmrNm/e3PBAzczGk8ySg6RTgKcj4r6RvD8iro6IORExZ9q0aXWOzsxsfMtysZ+jgHdKOgnYBXidpOuApyTtHRGbJO0NPJ1hjGZm41JmJYeIWBQR+0TEDOBs4I6IeA+wHDg3Oexc4JaMQjQzG7eybnMoZTFwvKRHgOOTbTMza6KWWEM6Iu4C7kqe/wE4Nst4zMzGu1YsOZiZWcacHMzMLMXJwczMUpwczMwsxcnBzMxSnBzMzCzFycHMzFKcHMzMLMXJwczMUpwczMwsxcnBzMxSnBzMzCzFycHMzFKcHMzMLMXJwczMUpwczMwsxcnBzMxSnBzMzCzFycHMzFKcHMzMLMXJwczMUpwczMwsxcnBzMxSnBzMzCzFycHMzFIySw6SdpH0C0n3S1on6dJk/1RJt0l6JPk5JasYzczGqyxLDi8Dx0TEocAs4ERJRwALgdsj4gDg9mTbzMyaKLPkEDkvJpudySOAU4Frk/3XAvOaH52Z2fg2McuTS+oA7gPeCHwlIu6VtFdEbAKIiE2S9izz3vOA8wD222+/ZoVcld7VfSxZuZ6N/QNM7+5iwdyZzJvdk3VYZmZVy7RBOiK2R8QsYB/gcElvreG9V0fEnIiYM23atIbFWKve1X0sumktff0DBNDXP8Cim9bSu7ov69DMzKrWEr2VIqIfuAs4EXhK0t4Ayc+ns4usdktWrmdgcPuQfQOD21mycn1GEZmZ1S7L3krTJHUnz7uA44CHgeXAuclh5wK3ZBLgCG3sH6hpv5lZK8qyzWFv4Nqk3WECsCwifiDpbmCZpA8ATwBnZRhjzaZ3d9FXIhFM7+7KIBozs5HJLDlExAPA7BL7/wAc2/yI6mPB3JksumntkKqlrs4OFsydmWFUZma1ybS30liU75Xk3kpm1s6cHBpg3uweJwMza2st0VvJzMxai5ODmZmlODmYmVmKk4OZmaU4OZiZWYqTg5mZpTg5mJlZipODmZmlODmYmVmKk4OZmaU4OZiZWYqTg5mZpTg5mJlZipODmZmlODmYmVmKk4OZmaU4OZiZWYqTg5mZpTg5mJlZSk3JQdIUSYc0KhgzM2sNwyYHSXdJep2kqcD9wDclfbHxoZmZWVaqKTnsHhEvAKcD34yIw4DjGhuWmZllqZrkMFHS3sC7gB80OB4zM2sB1SSHy4CVwG8j4peS3gA8MtoTS9pX0p2SHpK0TtIFyf6pkm6T9Ejyc8poz2VmZrUZNjlExI0RcUhEfDjZ/l1EnFGHc28DLoqItwBHAOdLOhBYCNweEQcAtyfbZmbWRNU0SL9J0u2SHky2D5H0qdGeOCI2RcSvkud/BB4CeoBTgWuTw64F5o32XGZmVptqqpX+L7AIGASIiAeAs+sZhKQZwGzgXmCviNiUnGsTsGeZ95wnaZWkVZs3b65nOGZm4141yWFyRPyiaN+2egUgaTfge8CFSa+oqkTE1RExJyLmTJs2rV7hmJkZ1SWHZyT9KRAAks4ENtXj5JI6ySWG6yPipmT3U0nvKJKfT9fjXGZmVr1qksP5wDeAN0vqAy4EPjzaE0sS8K/AQxFROKhuOXBu8vxc4JbRnsvMzGozcbgDIuJ3wHGSdgUmJI3H9XAU8F5graQ1yb6/AxYDyyR9AHgCOKtO5zMzsyoNmxwkfbpoG4CIuGw0J46InwEq8/Kxo/lsMzMbnWGTA7Cl4PkuwCnkup2amdkYVU210hcKtyV9nly7gJmZjVEjWc9hMvCGegdiZmato5o2h7Uk3ViBDmAaufmWzMxsjKqmzeGUgufbgKciom6D4Gz0elf3sWTlejb2DzC9u4sFc2cyb3ZP1mGZWRsrmxySxX0Airuuvk4SEfFs48KyavWu7mPRTWsZGNwOQF//AItuWgvgBGFmI1ap5HAfueqkUt1NA7c7tIQlK9fvTAx5A4PbWbJyvZODmY1Y2eQQEfs3MxAbmY39AzXtNzOrRlW9lSRNkXS4pLflH40OzKozvbur5P4Ajlp8B72r+5obkJmNCdWs5/BB4KfkVoO7NPl5SWPDsmotmDuTrs6Okq/l2x+cIMysVtWUHC4A/ivweEQcTW7dBS+g0CLmze7hitMPpqdMCSLf/mBmVotqksNLEfESgKTXRMTDwMzGhmW1mDe7h58vPKbsRFVufzCzWlUzzmGDpG6gF7hN0nPAxkYGZSMzvbuLvhKJoFy7hJlZOcOWHCLitIjoj4hLgL8ntwbDvAbHZSNQqv2hq7ODBXNd0DOz2lQzfcY/AUsj4j8j4idNiMlGKD+uwaOlzWy0qqlW+hXwKUlvAm4mlyhWNTYsG6l5s3ucDMxs1KqpVro2Ik4CDgd+A/yjpEcaHpmZmWWmlim73wi8GZgBPNyQaMzMrCVUMwguX1K4DHgQOCwi3tHwyMzMLDPVtDk8BhwZEc80OhgzM2sN1SwT+vVmBGKNl1/3oa9/gA6J7RH0uEeTmZVQTcnBxoDidR+2R25xP6//YGallG1zkPRDSTOaGIs1UKl1H/I8/5KZFavUIP0t4FZJn5TU2aR4rEGGm1/J8y+ZWaFKi/0sk7QC+DSwStK3gR0Fr3+xCfFZnZSbdylv9y7nfzN71XBdWQeBLcBrgNcWPUZN0jWSnpb0YMG+qZJuk/RI8nNKPc413lVa9wFgyyvbvO6Dme1Uqc3hRGANMBn4s4i4OCIuzT/qdP5vAScW7VsI3B4RBwC3J9s2SsOt+zC4PdzuYGY7Veqt9EngrIhY16iTR8RPSzR6nwq8PXl+LXAX8IlGxTCe5Odd2n/hCqLE66XaHfLdXz2Rn9n4UrbkEBH/vZGJoYK9ImJTEsMmYM9SB0k6T9IqSas2b/bCdLUot75D8f5899e+/gGCXLfXC5euYdalt7oKymyMq2VupZYSEVdHxJyImDNt2rSsw2krpdofBBz95qG/x3LdX/sHBr02tdkY14rJ4SlJewMkP5/OOJ4xZ97sHs44rGfIsqIBfO++viE3/ErdWwcGt3Ph0jUctfgOJwmzMagVk8Ny4Nzk+bnALRnGMmbd+fDmVLtD8WC4apYXzY+wdoIwG1syTQ6SvgPcDcyUtEHSB4DFwPHJTLDHJ9tWZ+VKBYX7h+v+mucR1mZjT6ZzK0XEu8u8dGxTAxmHyg2KKywt5HslXfr9dTy3dbDi53mEtdnY0orVStYEpUoFXZ0dLJg7c+d2vhvrcIkBqquCMrP24VlZx6l8qaDcGIbiWVwrKdXTyczam5PDOJYfFFdKpVlci+V7Os15/VQPkDMbI1ytZCXV2obgRmmzscXJwUoaSRuCG6XNxg4nByup3ChqgA4p/QaGJpTe1X0ctfgO9l+4wgPlzNqQk4OVVDiLq4Ce7i6unD+L3y8+mS+861A6O4YmiM4O7ezpVGpOJg+UM2svbpC2sio1WKeGVxdsl2rMzrdJuMHarD245GA1W7JyPYM7hmaHwR3BRcvuZ/+FK8quONfXP+DSg1mbcMnBalau4Xl7lFolYqiLbryfS5av4/mBQa8PYdbCXHKwmo1mNPT2HUH/wKDbIsxanJOD1WzB3JmpBumR8vgIs9bk5GA1mze7h10n1a9G0uMjzFqP2xxsRJ4fGH4yvmoVj4/wmtVm2XNysBEpN+X3SOQn7Sue7C/fJgE4QYwx/hLQ+lytZCNS7UJA1bjz4c1A5fERI+FR2rVrxu/MgyTbg0sONiKlpvze8vI2+kdQ3dTXP8BRi+8oWxKppU0i/420r38A8erYPJdChteskpsHSbYHJwcbseIR1L2r+7hw6Zqyx0tQbihEpSqqarvOFt/cyq2R7RtQac26aVezRK1lz8nB6mbe7J6yS4r2JPXK1S4gVOjZLS/zqd613Pnw5op11NWsQTGSG1Ar1Y/XK5be1X1csnzdzpLelMmdZVf8q/dNu1x7Vffkzrqex0bHbQ5WVxe/46Cyy48WTuZXi4HBHVx3zxPD1lFXcxOrdQDfaOvH61mHX6+6+t7VfSy48f4hVYCVloLdvau+N+1y42RefGmb2x1aiKKKKQ9a3Zw5c2LVqlVZh2GJar7d7r9wRarap1a7Tuqge/KknefZ+sq2ije5rs4Orjj94Jq+aZdrC+nu6mTNxSeUfE+5do+RxjBcLD3dXfx84TFl48j/fo5+8zTufHhzzb3MpkzuZPWn09c6mlLMrEtvLdk+Ve5arDEk3RcRc0q95molq7uKs7km6tEVdssr29nySu4z+voH6JwgOjvE4PZXb8f5m3OHtLP+fNXjzw5bRZVXrjTSPzBI7+q+1Ps+1buW6+95YmdCqGe7R6UJDYuValy+7p4naj4nlC5VlPr8C5eu2dnmNGVyJxe/46Cy11lunIzbHVqHk4NlYqTtD5UM7gi6OiewY0duEsAOiSPeMIVfPfF82ZtkX/8AC268f+d28TfhSkksf5MvLClUY6TtHpXMvuxWnts6WLHRv56Ga995busgC76b+72WShDlfq+jmbfL6svJwTKRv2EUNorWw8Dgjp3Pt0fwn799dtjqq9x042uYNLEj1Y3zjMN6yn7j3phMQV5rkhvJDXC4sR75b/eNTAy1JsHB7blp3CGdIEp9Oci3TZU7b6mSXit1Fhhr3OZgmao0vqEV9FRoy8g3rNcSf1dnB2cc1rOzWmv3rk4k6N86SPfkTiIYMp05UNMNuVGumj9rxCU9AeccsR9zXj+1ZBtIpRt7qeSbb7cBWHDj/UPWFumcIJacdagTRJUqtTm0bHKQdCLwT0AH8C8RsbjcsU4O7aseDdONlL+xFbYjVNpfSU93FzP+S1dVpZlWMqlDTHvtLqNOUMXtQdU0zldqhK806LLHpYiqtF2DtKQO4CvA8cAG4JeSlkfEr7ONzOptpA3Txb2AGmX3rk6W/uLJkquifu++Pnbv6qyqWkzk5pCqJZm0is+deSh/W2FwY7UKEwPkGueLq50Kq4kq/W43Jt15yykc3Q3ptiQnjeG1ZMlB0pHAJRExN9leBBARV5Q63iWH9lWq2qCzQ+w6aSLPD+SqWl58aduQqoOuzg526ZxQsdtqMzUrUTXCrpM6mN69C488vaXsMb9ffHJDq//yv78pJf7W5fRU+aWiu6uTl7ftKFktVSpBjLc2jEolh1YdBNcDPFmwvSHZt5Ok8yStkrRq8+bNTQ3O6qdwYJzI/adfcuahrLn4BB5bfDKrP30CS846dMjrV5x+MP0tkhggd2PLD+maUJ81kJpmyyvbebRCYsi3q9RzosVi+VTw3NbBqhJDuYbrUvoHBktOCXLh0jWpQYmeEHCoVi05nAXMjYgPJtvvBQ6PiP9d6niXHMafVmzI7unu4tktLw/pMdXqOqSKa39fNX8W8GqjeP74LEtLV82fxbzZPWUH0tUqPyajXMP/WB6Y144lhw3AvgXb+wAbM4rFWlA9lyqtl439Ay2ZGLo6J9BdYgqMrs6Oiokh/578t2nIdQ/u6uzgyvmzuGr+rJ0li2b9JXq6u17tBv3Og+isUFSr9t/Hc1sHh1xjsfE6MK9Vk8MvgQMk7S9pEnA2sDzjmKyFzJvdw5IzD2VKwWRtkzsnVLxZNForDuDqnCCuOP0Q1lx8ws6beWH1XLl5rkTu5jvcTK0/X3gMv198MlfOn1UyAdVTcXXSvNk9Q6ocp0zupLurc+f1Tazh38LA4HZU5vBW/Ls2Q0tWKwFIOgm4ilxX1msi4vJyx7payfJ6V/dx0bL7K34jrmQCgKBS1fcE5apjihvJrzj94LKz0mZhuCksoHSHgHw33c/OO7hsV2MBjy0+ueTnjeb3X04111IcR6Xp48vpnFD67zpWG6XbrisrQET8EPhh1nFYe5k3u2fE3S67uzq55J0HAZVHbndIzD9837IDuBZ89/5Ut81ChfM91fsmKqipl02pRZsK31vrNBf591UaMFfYO+n5rYMUVsR1Tqj8u63WSFcP3G2XiUyeNHHc9FaqpGWTg9lIjWTsRHGjY/6GUKrhe3BHcN09T9DT3cWVSeNo8fuqGQmcnzq7Ug+d/M1+uBlnS11DtSpNlFjLNBeFnwcMGa+QHwXerOkvRtpO8NzWwZpKKGOZk4ONObVO6lfpZlfpJlNuGc1qZqUtfE+56o8Oid9ecRJQuvqn2msYjeFKFpXeV+3voBE34nJfEHad1MHWV7ZX7Gnl5WRzWrVB2mzEihcVKm5n7OzQkIbLSnXKwzVG5htnRxPre47Yr+Rr7/7zfYccVzgepLjxtZH14vmG58cWn8zPFx7TFjfNUuMyujo7uPy0gzmnzO87b7R/07GiZRuka+EGaatkNFUX1cy6Wq5xthaf6l3Ld+59cudU4+/+83357LyDR/WZ491ws7lW6jxQzd90LIymbsuJ92rh5GCNNNxU1WN5kNRYV+vqenmVZottpwTRjoPgzFpGvlrlqvmzyq6Pbe2pXPXTcH/TSuM/xgo3SJtVaaSNs9a6Rvo3LddRYSyNpnZyMKtBo3rXWHZG8jcdD8uculrJzKxGI62OaicuOZiZ1Wg8VDE6OZiZjcBYr2J0tZKZmaU4OZiZWYqTg5mZpbjNwcysidpl2g0nBzOzJimedqPczL6twNVKZmZN0k7Tbjg5mJk1SbnpNfr6B+hd3dfkaCpzcjAza5JK02ssumltSyUIJwczsyYpNe1GXqtVL7lB2sysSYZbGraVZnV1ycHMrInmze7ZuYRtsVaa1dXJwcysydphVldXK5mZNVk7zOrq5GBmloFWn9U1k2olSWdJWidph6Q5Ra8tkvSopPWS5mYRn5lZs/Wu7uOoxXew/8IVHLX4jsy7tWZVcngQOB34RuFOSQcCZwMHAdOBH0t6U0RsT3+EmdnY0IrTamRScoiIhyKiVIfeU4EbIuLliHgMeBQ4vLnRmZk1VytOq9FqvZV6gCcLtjck+1IknSdplaRVmzdvbkpwZmaNUG58Q5bjHhqWHCT9WNKDJR6nVnpbiX1R6sCIuDoi5kTEnGnTptUnaDOzDJQb35DluIeGtTlExHEjeNsGYN+C7X2AjfWJyMysNS2YO3NImwNkP+6h1aqVlgNnS3qNpP2BA4BfZByTmVlDzZvdwxWnH0xPdxcCerq7uOL0gzPt6ppJbyVJpwFfAqYBKyStiYi5EbFO0jLg18A24Hz3VDKz8aDVxj1kkhwi4mbg5jKvXQ5c3tyIzMyskEdIm5m1oUavRe3kYGbWZpoxaK7VGqTNzGwYzRg05+RgZtZmmjFozsnBzKzNNGPQnJODmVmbacZiQW6QNjNrM81YLMjJwcysDTV60JyrlczMLMXJwczMUpwczMwsxcnBzMxSnBzMzCxFESUXWmsrkjYDj2cdRx3tATyTdRBN5mse+8bb9ULrX/PrI6LkUppjIjmMNZJWRcScrONoJl/z2Dferhfa+5pdrWRmZilODmZmluLk0JquzjqADPiax77xdr3QxtfsNgczM0txycHMzFKcHMzMLMXJoUVJWiLpYUkPSLpZUnfWMTWSpLMkrZO0Q1Jbdv2rlqQTJa2X9KikhVnH02iSrpH0tKQHs46lWSTtK+lOSQ8l/64vyDqmWjk5tK7bgLdGxCHAb4BFGcfTaA8CpwM/zTqQRpLUAXwF+CvgQODdkg7MNqqG+xZwYtZBNNk24KKIeAtwBHB+u/2dnRxaVETcGhHbks17gH2yjKfRIuKhiKjf6uit63Dg0Yj4XUS8AtwAnJpxTA0VET8Fns06jmaKiE0R8avk+R+Bh4DGLb7QAE4O7eH9wL9nHYTVRQ/wZMH2BtrspmG1kTQDmA3cm3EoNfFKcBmS9GPgT0q89MmIuCU55pPkiqjXNzO2RqjmescBldjn/uRjlKTdgO8BF0bEC1nHUwsnhwxFxHGVXpd0LnAKcGyMgQEpw13vOLEB2Ldgex9gY0axWANJ6iSXGK6PiJuyjqdWrlZqUZJOBD4BvDMitmYdj9XNL4EDJO0vaRJwNrA845isziQJ+FfgoYj4YtbxjISTQ+v6MvBa4DZJayR9PeuAGknSaZI2AEcCKyStzDqmRkg6GXwUWEmukXJZRKzLNqrGkvQd4G5gpqQNkj6QdUxNcBTwXuCY5P/vGkknZR1ULTx9hpmZpbjkYGZmKU4OZmaW4uRgZmYpTg5mZpbi5GBmZilODmaJZCbNxyRNTbanJNuvr8Nnvzj6CM2ax8nBLBERTwJfAxYnuxYDV0fE49lFZZYNJwezoa4EjpB0IfAXwBeKD5D0j5I+UrB9iaSLJO0m6XZJv5K0VlJqtlVJb5f0g4LtL0v66+T5YZJ+Iuk+SSsl7Z3s/5ikXydre9xQ9ys2K8FzK5kViIhBSQuAHwEnJNNqF7sBuAr4arL9LnLrFbwEnBYRL0jaA7hH0vJq5sVK5uH5EnBqRGyWNB+4nNyMvAuB/SPi5bG+6JO1DicHs7S/AjYBbyW36NIQEbFa0p6SpgPTgOci4onkBv8Pkt4G7CA3FfdewP+r4pwz8+fLTctDRxIDwAPA9ZJ6gd5RXJdZ1ZwczApImgUcT271rp9JuiEiNpU49LvAmeSmIM9X9ZxDLlkclpRAfg/sUvS+bQytzs2/LmBdRBxZ4lwnA28D3gn8vaSDChaCMmsItzmYJZKZNL9Gbu79J4AlwOfLHH4DuRlVzySXKAB2B55OEsPRQKleTo8DB0p6jaTdgWOT/euBaZKOTGLplHSQpAnAvhFxJ/BxoBvYbZSXajYslxzMXvUh4ImIyFclfRX4a0l/GRE/KTwwItZJei3QV1CyuB74vqRVwBrg4eITRMSTkpaRqyp6BFid7H9F0pnAPydJYyK5do3fANcl+wRcGRH9dbxms5I8K6uZmaW4WsnMzFKcHMzMLMXJwczMUpwczMwsxcnBzMxSnBzMzCzFycHMzFL+Px8DCUejPwxYAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x, y)\n",
    "\n",
    "plt.xlabel('X values')\n",
    "plt.ylabel('Y values')\n",
    "plt.title('X vs Y values', fontsize = 15)\n",
    "plt.show()\n",
    "\n",
    "## Problem 6\n",
    "## b) the scatterplot is plotted below between the X values and the Y values respectively. Title, x label and y label \n",
    "##    are also written to get a good understanding of the data.\n",
    "##    In the below cell, we see that there seems to be a linearity from the X values between the range -1 and 1 respectively. \n",
    "##    However, the curve actually moves from linearity to non-linearity \n",
    "##    with the increase or the decrease of the values of X respectively. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fac066a7",
   "metadata": {},
   "source": [
    "# c) Performing operations with seed value = 123"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 508,
   "id": "b3178eb0-646b-4dca-a675-ddd156509456",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import LeaveOneOut\n",
    "from sklearn.model_selection import cross_val_score\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 509,
   "id": "b8dbd1c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = np.random.normal(0, 1, (200))\n",
    "y = X + 2 * X**2 - 2 * X**3 + np.random.normal(0, 1, (200))\n",
    "X = X.reshape(-1, 1)\n",
    "y = y.reshape(-1, 1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 510,
   "id": "0ea0181b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Average Cross Validation Error using Leave One Out Cross Validation is: -54.44031803203236\n"
     ]
    }
   ],
   "source": [
    "poly_model = PolynomialFeatures(degree = 1)\n",
    "X_poly_features = poly_model.fit_transform(X)\n",
    "LOO = LeaveOneOut()\n",
    "model = LinearRegression()\n",
    "cross_validation_error = cross_val_score(estimator = model, X = X_poly_features, y = y, cv = LOO, scoring = 'neg_mean_squared_error').mean()\n",
    "print(\"The Average Cross Validation Error using Leave One Out Cross Validation is: {}\".format(cross_validation_error))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 511,
   "id": "e8050f4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Average Cross Validation Error using Leave One Out Cross Validation is: -31.501700134871612\n"
     ]
    }
   ],
   "source": [
    "poly_model = PolynomialFeatures(degree = 2)\n",
    "X_poly_features = poly_model.fit_transform(X)\n",
    "LOO = LeaveOneOut()\n",
    "model = LinearRegression()\n",
    "cross_validation_error = cross_val_score(estimator = model, X = X_poly_features, y = y, cv = LOO, scoring = 'neg_mean_squared_error').mean()\n",
    "print(\"The Average Cross Validation Error using Leave One Out Cross Validation is: {}\".format(cross_validation_error))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 512,
   "id": "1239ffd6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Average Cross Validation Error using Leave One Out Cross Validation is: -0.8730559711228897\n"
     ]
    }
   ],
   "source": [
    "poly_model = PolynomialFeatures(degree = 3)\n",
    "X_poly_features = poly_model.fit_transform(X)\n",
    "LOO = LeaveOneOut()\n",
    "model = LinearRegression()\n",
    "cross_validation_error = cross_val_score(estimator = model, X = X_poly_features, y = y, cv = LOO, scoring = 'neg_mean_squared_error').mean()\n",
    "print(\"The Average Cross Validation Error using Leave One Out Cross Validation is: {}\".format(cross_validation_error))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 513,
   "id": "420e8726",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Average Cross Validation Error using Leave One Out Cross Validation is: -0.8810894543450098\n"
     ]
    }
   ],
   "source": [
    "poly_model = PolynomialFeatures(degree = 4)\n",
    "X_poly_features = poly_model.fit_transform(X)\n",
    "LOO = LeaveOneOut()\n",
    "model = LinearRegression()\n",
    "model.fit(X_poly_features, y)\n",
    "cross_validation_error = cross_val_score(estimator = model, X = X_poly_features, y = y, cv = LOO, scoring = 'neg_mean_squared_error').mean()\n",
    "print(\"The Average Cross Validation Error using Leave One Out Cross Validation is: {}\".format(cross_validation_error))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 514,
   "id": "c50e5ea9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Average Cross Validation Error using Leave One Out Cross Validation is: -0.89823160528769\n"
     ]
    }
   ],
   "source": [
    "poly_model = PolynomialFeatures(degree = 5)\n",
    "X_poly_features = poly_model.fit_transform(X)\n",
    "LOO = LeaveOneOut()\n",
    "model = LinearRegression()\n",
    "model.fit(X_poly_features, y)\n",
    "cross_validation_error = cross_val_score(estimator = model, X = X_poly_features, y = y, cv = LOO, scoring = 'neg_mean_squared_error').mean()\n",
    "print(\"The Average Cross Validation Error using Leave One Out Cross Validation is: {}\".format(cross_validation_error))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bd55571",
   "metadata": {},
   "source": [
    "# d) Performing the same operations with different seed value 12345"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 515,
   "id": "dc8f29f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(12345)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 516,
   "id": "88f2bf1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = np.random.normal(0, 1, (200))\n",
    "y = X + 2 * X**2 - 2 * X**3 + np.random.normal(0, 1, (200))\n",
    "X = X.reshape(-1, 1)\n",
    "y = y.reshape(-1, 1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "id": "03a07ebb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Average Cross Validation Error using Leave One Out Cross Validation is: -26.534996047663075\n"
     ]
    }
   ],
   "source": [
    "poly_model = PolynomialFeatures(degree = 1)\n",
    "X_poly_features = poly_model.fit_transform(X)\n",
    "LOO = LeaveOneOut()\n",
    "model = LinearRegression()\n",
    "cross_validation_error = cross_val_score(estimator = model, X = X_poly_features, y = y, cv = LOO, scoring = 'neg_mean_squared_error').mean()\n",
    "print(\"The Average Cross Validation Error using Leave One Out Cross Validation is: {}\".format(cross_validation_error))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 518,
   "id": "17c298b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Average Cross Validation Error using Leave One Out Cross Validation is: -32.53855587022528\n"
     ]
    }
   ],
   "source": [
    "poly_model = PolynomialFeatures(degree = 2)\n",
    "X_poly_features = poly_model.fit_transform(X)\n",
    "LOO = LeaveOneOut()\n",
    "model = LinearRegression()\n",
    "cross_validation_error = cross_val_score(estimator = model, X = X_poly_features, y = y, cv = LOO, scoring = 'neg_mean_squared_error').mean()\n",
    "print(\"The Average Cross Validation Error using Leave One Out Cross Validation is: {}\".format(cross_validation_error))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "id": "7fc82015",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Average Cross Validation Error using Leave One Out Cross Validation is: -1.1079418003348265\n"
     ]
    }
   ],
   "source": [
    "poly_model = PolynomialFeatures(degree = 3)\n",
    "X_poly_features = poly_model.fit_transform(X)\n",
    "LOO = LeaveOneOut()\n",
    "model = LinearRegression()\n",
    "cross_validation_error = cross_val_score(estimator = model, X = X_poly_features, y = y, cv = LOO, scoring = 'neg_mean_squared_error').mean()\n",
    "print(\"The Average Cross Validation Error using Leave One Out Cross Validation is: {}\".format(cross_validation_error))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 520,
   "id": "0c7e906f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Average Cross Validation Error using Leave One Out Cross Validation is: -1.3234306760123509\n"
     ]
    }
   ],
   "source": [
    "poly_model = PolynomialFeatures(degree = 4)\n",
    "X_poly_features = poly_model.fit_transform(X)\n",
    "LOO = LeaveOneOut()\n",
    "model = LinearRegression()\n",
    "cross_validation_error = cross_val_score(estimator = model, X = X_poly_features, y = y, cv = LOO, scoring = 'neg_mean_squared_error').mean()\n",
    "print(\"The Average Cross Validation Error using Leave One Out Cross Validation is: {}\".format(cross_validation_error))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 521,
   "id": "b98bdd99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Average Cross Validation Error using Leave One Out Cross Validation is: -1.1099273761939097\n"
     ]
    }
   ],
   "source": [
    "poly_model = PolynomialFeatures(degree = 5)\n",
    "X_poly_features = poly_model.fit_transform(X)\n",
    "LOO = LeaveOneOut()\n",
    "model = LinearRegression()\n",
    "cross_validation_error = cross_val_score(estimator = model, X = X_poly_features, y = y, cv = LOO, scoring = 'neg_mean_squared_error').mean()\n",
    "print(\"The Average Cross Validation Error using Leave One Out Cross Validation is: {}\".format(cross_validation_error))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
